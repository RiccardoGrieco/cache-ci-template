name: C++ CI Workflow

# template derived from https://github.com/robotology/human-dynamics-estimation/blob/master/.github/workflows/ci.yml

on:
    push:
    pull_request:
    schedule:
    # run a cron job for a nightly build
    # * is a special character in YAML so you have to quote this string
    # Execute a "nightly" build at 2 AM UTC
    - cron: '0 2 * * *'
    
env:
    # flag to easily "invalidate" the cache (avoids the restoration)
    action-restore-cache: 'true'
    # flag to enable the cache saving
    action-save-cache: 'true'
    # define conda-installed dependencies in a file to use it's hash in the cache key
    CONDA_DEPS_FILE: '.github/workflows/conda-deps.yml' 
    # define conda-installed dependencies in a file to use it's hash in the cache key
    SOURCE_DEPS_FILE: '.github/workflows/source-deps.txt'

jobs:
    build:
        name: '[${{matrix.os}}@${{matrix.build_type}}]'
        runs-on: ${{matrix.os}}
        strategy:
            matrix:
                build_type: [Release]
                os: [ubuntu-latest, windows-latest, macos-latest]  
            fail-fast: false
                
        steps:
        - uses: actions/checkout@v3

        - name: Configure VS Toolchain (Windows)
          if: matrix.os == 'windows-latest'
          uses: ilammy/msvc-dev-cmd@v1.12.1

        - name: Set compiler paths (Windows)
          if: matrix.os == 'windows-latest'
          shell: bash
          run: |
            bash_vc_install=${VCToolsInstallDir//\\//}
            compiler_path=${bash_vc_install}bin/Hostx64/x64/cl.exe
            echo CMAKE_CXX_COMPILER_PATH="-DCMAKE_CXX_COMPILER=${compiler_path}" >> $GITHUB_ENV
            echo CMAKE_C_COMPILER_PATH="-DCMAKE_C_COMPILER=${compiler_path}" >> $GITHUB_ENV
            
        # Get the current date
        # The date is used to invalidate the cache after some time
        # so the format decides decides when it happens (in this case the cache is invalidated each day)
        - name: Get current date
          shell: bash
          run: |
            echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

        # Import source-deps tags
        - name: Import source dependencies tags
          shell: bash
          run: |
            cat ${SOURCE_DEPS_FILE} >> $GITHUB_ENV

        # Use conda for main dependencies
        - uses: conda-incubator/setup-miniconda@v2
          with:
            miniforge-variant: Mambaforge
            miniforge-version: latest
        
        # Print the environment variables to simplify development and debugging
        - name: Environment Variables
          shell: bash
          run: env
          
        # Remove apt repos on Ubuntu that are known to break from time to time 
        # See https://github.com/actions/virtual-environments/issues/323 
        - name: Remove broken apt repos [Ubuntu]
          if: matrix.os == 'ubuntu-latest'
          run: |
            for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
        
        # ============
        # DEPENDENCIES
        # ============
        - name: Restore cached conda based dependencies
          if: ${{ env.action-restore-cache == 'true' }}
          uses: actions/cache/restore@v3
          with:
            path: ${{ env.CONDA }}/envs/test
            key: ${{ matrix.os }}-conda-${{ hashFiles(env.CONDA_DEPS_FILE) }}-${{ env.DATE }}
          id: cache-restore-conda-deps
        
        - name: Dependencies (using conda)
          shell: bash -l {0}
          if: steps.cache-restore-conda-deps.outputs.cache-hit != 'true'
          run: |
            mamba env update -f .github/workflows/conda-deps.yml
          
        - name: Cache conda based dependencies
          if: ${{ env.action-save-cache == 'true' && steps.cache-restore-conda-deps.outputs.cache-hit != 'true' }}
          uses: actions/cache/save@v3
          with:
            path: ${{ env.CONDA }}/envs/test
            key: ${{ matrix.os }}-conda-${{ hashFiles(env.CONDA_DEPS_FILE) }}-${{ env.DATE }}
          id: cache-save-conda-deps
        
        - name: Restore cached source-based dependencies
          if: ${{ env.action-restore-cache == 'true' && steps.cache-restore-conda-deps.outputs.cache-hit == 'true' }}
          uses: actions/cache/restore@v3
          with:
            path: ${{ github.workspace }}/install/deps
            key: ${{ matrix.os }}-${{ matrix.build_type }}-source-${{hashFiles(env.SOURCE_DEPS_FILE)}}-${{ env.DATE }}
          id: cache-restore-source-deps

        - name: Source-based dependencies
          if: ${{ steps.cache-restore-conda-deps.outputs.cache-hit != 'true' || steps.cache-restore-source-deps.outputs.cache-hit != 'true' }}
          shell: bash -l {0}
          run: |
            # manif library
            cd ${GITHUB_WORKSPACE}
            # shallow clone (only for branch names and tags)
            git clone --depth 1 --branch ${manif_TAG} https://github.com/artivis/manif.git
            cd manif
            mkdir -p build
            cd build
            cmake -G"Ninja" .. "${CMAKE_CXX_COMPILER_PATH}" "${CMAKE_C_COMPILER_PATH}" \
                  -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/deps \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                  -DBUILD_SHARED_LIBS=ON
            cmake --build . --config ${{matrix.build_type}} --target install

        - name: Cache source-based dependencies
          if: ${{ env.action-save-cache == 'true' && steps.cache-restore-source-deps.outputs.cache-hit != 'true' }}
          uses: actions/cache/save@v3
          with:
            path: ${{ github.workspace }}/install/deps
            key: ${{ matrix.os }}-${{ matrix.build_type }}-source-${{hashFiles(env.SOURCE_DEPS_FILE)}}-${{ env.DATE }}
          id: cache-save-source-deps

        - name: Extend LD_LIBRARY_PATH [Ubuntu]
          if: startsWith(matrix.os, 'ubuntu')
          run: |
            echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}${GITHUB_WORKSPACE}/install/deps/lib" >> $GITHUB_ENV

        - name: Extend PATH
          shell: bash
          run: |
            echo "${GITHUB_WORKSPACE}/install/deps/bin" >> $GITHUB_PATH
            echo "${GITHUB_WORKSPACE}/build/install/bin" >> $GITHUB_PATH
        
        # ===================
        # CMAKE-BASED PROJECT
        # ===================
        # We will just configure and build the project now. Further modifications and tests can be added
        # Configure step
        - name: Configure
          shell: bash -l {0}
          run: |
            mkdir -p build
            cd build
            cmake -G"Ninja" .. "${CMAKE_CXX_COMPILER_PATH}" "${CMAKE_C_COMPILER_PATH}" \
                  -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install/deps \
                  -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                  -DBUILD_TESTING:BOOL=ON \
                  -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install
                    
        # Build step          
        - name: Build
          shell: bash -l {0}
          run: |
            cd build
            cmake --build . --config ${{matrix.build_type}} --verbose   
            
        # Test step
        - name: Test
          shell: bash -l {0}
          run: |
            cd build
            ctest --output-on-failure -C ${{ matrix.build_type }} .

        - name: Print CMake log and cache on failure
          if: ${{ steps.configure.conclusion == 'failure' }}
          shell: bash
          run: |
            echo "----------------- CMAKE CACHE ------------------------------"
            cat ${GITHUB_WORKSPACE}/element_wearable_sw/build/CMakeCache.txt
            echo "----------------- CMAKE OUTPUT ------------------------------"
            cat ${GITHUB_WORKSPACE}/element_wearable_sw/build/CMakeFiles/CMakeOutput.log
